{"mappings":"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","sources":["<anon>","src/index.ts","src/indexed-storage.ts"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $f534e8972a5b1be2$exports = {};\n\n$parcel$export($f534e8972a5b1be2$exports, \"IndexedStorage\", () => $f534e8972a5b1be2$export$41a78aa1acdd6131);\n$parcel$export($f534e8972a5b1be2$exports, \"indexedStorage\", () => $f534e8972a5b1be2$export$5281f72867bab9d2);\n/**\n * Minimal Wrapper for indexedDB\n *\n * Based on this gist\n * https://gist.github.com/JamesMessinger/a0d6389a5d0e3a24814b\n */ const { indexedDB: $f534e8972a5b1be2$var$indexedDB } = window;\nclass $f534e8972a5b1be2$export$41a78aa1acdd6131 {\n    static VERSION = 1;\n    request;\n    promiseFulfilled;\n    dbPromise;\n    success = ()=>{\n        this.promiseFulfilled(this.request.result);\n    };\n    update = ()=>{\n        const db = this.request.result;\n        const store = db.createObjectStore(\"objects\", {\n            keyPath: \"id\"\n        });\n    // store.createIndex(\"NameIndex\", ['_created', '_modified'])\n    };\n    _name;\n    get name() {\n        return this._name;\n    }\n    constructor(name){\n        this._name = name;\n        const request = $f534e8972a5b1be2$var$indexedDB.open(name, $f534e8972a5b1be2$export$41a78aa1acdd6131.VERSION);\n        request.onsuccess = this.success;\n        request.onupgradeneeded = this.update;\n        this.dbPromise = new Promise((resolve)=>{\n            this.promiseFulfilled = resolve;\n        });\n        this.request = request;\n    }\n    async setItem(id, value) {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.put({\n                id: id,\n                value: value\n            });\n            req.onsuccess = resolve;\n        });\n    }\n    async getItem(id) {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.get(id);\n            req.onsuccess = ()=>{\n                resolve(req.result?.value != null ? req.result.value : undefined);\n            };\n        });\n    }\n    async count() {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.count();\n            req.onsuccess = ()=>{\n                resolve(req.result);\n            };\n        });\n    }\n    async allKeys() {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.getAllKeys();\n            req.onsuccess = ()=>{\n                resolve(req.result);\n            };\n        });\n    }\n    async delete(id) {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.delete(id);\n            req.onsuccess = resolve;\n        });\n    }\n    async clear() {\n        const db = await this.dbPromise;\n        const tx = db.transaction(\"objects\", \"readwrite\");\n        const store = tx.objectStore(\"objects\");\n        return new Promise((resolve)=>{\n            const req = store.clear();\n            req.onsuccess = resolve;\n        });\n    }\n}\nconst $f534e8972a5b1be2$export$5281f72867bab9d2 = new $f534e8972a5b1be2$export$41a78aa1acdd6131(\"default-local-db\");\n\n\n\n\nexport {$f534e8972a5b1be2$export$41a78aa1acdd6131 as IndexedStorage, $f534e8972a5b1be2$export$5281f72867bab9d2 as indexedStorage};\n//# sourceMappingURL=index.js.map\n","export * from './indexed-storage'\n","/**\n * Minimal Wrapper for indexedDB\n *\n * Based on this gist\n * https://gist.github.com/JamesMessinger/a0d6389a5d0e3a24814b\n */\n\nconst { indexedDB } = window\n\nexport class IndexedStorage {\n  static VERSION = 1\n\n  private request: any\n  private promiseFulfilled?: (db: any) => void\n  private dbPromise: Promise<any>\n\n  private success = () => {\n    this.promiseFulfilled!(this.request.result)\n  }\n\n  private update = () => {\n    const db = this.request.result\n    const store = db.createObjectStore('objects', { keyPath: 'id' })\n    // store.createIndex(\"NameIndex\", ['_created', '_modified'])\n  }\n\n  private _name: string\n\n  get name(): string {\n    return this._name\n  }\n\n  constructor(name: string) {\n    this._name = name\n    const request = indexedDB.open(name, IndexedStorage.VERSION)\n    request.onsuccess = this.success\n    request.onupgradeneeded = this.update\n\n    this.dbPromise = new Promise((resolve) => {\n      this.promiseFulfilled = resolve\n    })\n\n    this.request = request\n  }\n\n  async setItem(id: string, value: any): Promise<void> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.put({ id, value })\n      req.onsuccess = resolve\n    })\n  }\n\n  async getItem(id: string): Promise<any | undefined> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.get(id)\n      req.onsuccess = () => {\n        resolve(req.result?.value != null ? req.result.value : undefined)\n      }\n    })\n  }\n\n  async count(): Promise<number> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.count()\n      req.onsuccess = () => {\n        resolve(req.result)\n      }\n    })\n  }\n\n  async allKeys(): Promise<number> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.getAllKeys()\n      req.onsuccess = () => {\n        resolve(req.result)\n      }\n    })\n  }\n\n  async delete(id: string): Promise<void> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.delete(id)\n      req.onsuccess = resolve\n    })\n  }\n\n  async clear(): Promise<void> {\n    const db = await this.dbPromise\n    const tx = db.transaction('objects', 'readwrite')\n    const store = tx.objectStore('objects')\n    return new Promise((resolve) => {\n      const req = store.clear()\n      req.onsuccess = resolve\n    })\n  }\n}\n\nexport const indexedStorage = new IndexedStorage('default-local-db')\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$f534e8972a5b1be2$exports","$f534e8972a5b1be2$export$41a78aa1acdd6131","$f534e8972a5b1be2$export$5281f72867bab9d2","indexedDB","$f534e8972a5b1be2$var$indexedDB","window","VERSION","request","promiseFulfilled","dbPromise","success","result","update","db","createObjectStore","keyPath","_name","name","constructor","open","onsuccess","onupgradeneeded","Promise","resolve","setItem","id","value","tx","transaction","store","objectStore","req","put","getItem","undefined","count","allKeys","getAllKeys","delete","clear","IndexedStorage","indexedStorage"],"version":3,"file":"index.js.map"}