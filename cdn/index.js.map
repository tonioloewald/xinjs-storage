{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,C,E,E,E,iB,I,G,E,E,iB,I,GEOA,GAAM,CAAA,UAAE,CAAS,CAAE,CAAG,MAEf,OAAM,EACX,OAAO,QAAU,CAAC,AAEV,CAAA,OAAY,AACZ,CAAA,gBAAoC,AACpC,CAAA,SAAuB,AAEvB,CAAA,QAAU,KAChB,IAAI,CAAC,gBAAgB,CAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAC5C,CAAC,AAEO,CAAA,OAAS,KAED,AADH,IAAI,CAAC,OAAO,CAAC,MAAM,CACb,iBAAiB,CAAC,UAAW,CAAE,QAAS,IAAK,EAEhE,CAAC,AAEQ,CAAA,IAAY,AAErB,aAAY,CAAY,CAAE,CACxB,IAAI,CAAC,IAAI,CAAG,EACZ,IAAM,EAAU,EAAU,IAAI,CAAC,EAAM,EAAe,OAAO,CAC3D,CAAA,EAAQ,SAAS,CAAG,IAAI,CAAC,OAAO,CAChC,EAAQ,eAAe,CAAG,IAAI,CAAC,MAAM,CAErC,IAAI,CAAC,SAAS,CAAG,IAAI,QAAQ,AAAC,IAC5B,IAAI,CAAC,gBAAgB,CAAG,CAC1B,GAEA,IAAI,CAAC,OAAO,CAAG,CACjB,CAEA,MAAc,SACZ,CAAmE,CACnE,CAAW,CACG,CAMd,IAAM,EAAQ,AAJH,AADA,CAAA,MAAM,IAAI,CAAC,SAAS,AAAT,EACR,WAAW,CACvB,UACA,CAAC,MAAO,QAAS,SAAS,CAAC,QAAQ,CAAC,GAAU,YAAc,YAE7C,WAAW,CAAC,WAC7B,OAAO,IAAI,QAAQ,CAAC,EAAS,KAC3B,IAAM,EAAM,CAAK,CAAC,EAAO,CAAC,EAC1B,CAAA,EAAI,SAAS,CAAG,IACd,EAAQ,EAAI,MAAM,EAAE,OAAS,KAAO,EAAI,MAAM,CAAC,KAAK,CAAG,EAAI,MAAM,EACnE,EAAI,OAAO,CAAG,IAAM,EAAO,EAAI,KAAK,CACtC,EACF,CAEA,MAAM,QAAQ,CAAU,CAAE,CAAU,CAAiB,CACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAO,CAAE,GAAA,EAAI,MAAA,CAAM,EAC1C,CAEA,MAAM,QAAQ,CAAU,CAA4B,CAClD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAO,EAC9B,CAEA,MAAM,OAAyB,CAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,QACvB,CAEA,MAAM,SAA6B,CACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,aACvB,CAEA,MAAM,OAAO,CAAU,CAAiB,CACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAU,EACjC,CAEA,MAAM,OAAuB,CAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,QACvB,CACF,CAEO,IAAM,EAAiB,IAAI,EAAe,2B,K,c,C,K,c","sources":["<anon>","src/index.ts","src/indexed-storage.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $f534e8972a5b1be2$exports = {};\n\n$parcel$export($f534e8972a5b1be2$exports, \"IndexedStorage\", () => $f534e8972a5b1be2$export$41a78aa1acdd6131);\n$parcel$export($f534e8972a5b1be2$exports, \"indexedStorage\", () => $f534e8972a5b1be2$export$5281f72867bab9d2);\n/**\n * Minimal Wrapper for indexedDB\n *\n * Based on this gist\n * https://gist.github.com/JamesMessinger/a0d6389a5d0e3a24814b\n */ const { indexedDB: $f534e8972a5b1be2$var$indexedDB } = window;\nclass $f534e8972a5b1be2$export$41a78aa1acdd6131 {\n    static VERSION = 1;\n    request;\n    promiseFulfilled;\n    dbPromise;\n    success = ()=>{\n        this.promiseFulfilled(this.request.result);\n    };\n    update = ()=>{\n        const db = this.request.result;\n        const store = db.createObjectStore('objects', {\n            keyPath: 'id'\n        });\n    // store.createIndex(\"NameIndex\", ['_created', '_modified'])\n    };\n    name;\n    constructor(name){\n        this.name = name;\n        const request = $f534e8972a5b1be2$var$indexedDB.open(name, $f534e8972a5b1be2$export$41a78aa1acdd6131.VERSION);\n        request.onsuccess = this.success;\n        request.onupgradeneeded = this.update;\n        this.dbPromise = new Promise((resolve)=>{\n            this.promiseFulfilled = resolve;\n        });\n        this.request = request;\n    }\n    async dispatch(method, value) {\n        const db = await this.dbPromise;\n        const tx = db.transaction('objects', [\n            'put',\n            'clear',\n            'delete'\n        ].includes(method) ? 'readwrite' : 'readonly');\n        const store = tx.objectStore('objects');\n        return new Promise((resolve, reject)=>{\n            const req = store[method](value);\n            req.onsuccess = ()=>resolve(req.result?.value != null ? req.result.value : req.result);\n            req.onerror = ()=>reject(req.error);\n        });\n    }\n    async setItem(id, value) {\n        return this.dispatch('put', {\n            id: id,\n            value: value\n        });\n    }\n    async getItem(id) {\n        return this.dispatch('get', id);\n    }\n    async count() {\n        return this.dispatch('count');\n    }\n    async allKeys() {\n        return this.dispatch('getAllKeys');\n    }\n    async delete(id) {\n        return this.dispatch('delete', id);\n    }\n    async clear() {\n        return this.dispatch('clear');\n    }\n}\nconst $f534e8972a5b1be2$export$5281f72867bab9d2 = new $f534e8972a5b1be2$export$41a78aa1acdd6131('default-local-db');\n\n\n\n\nexport {$f534e8972a5b1be2$export$41a78aa1acdd6131 as IndexedStorage, $f534e8972a5b1be2$export$5281f72867bab9d2 as indexedStorage};\n//# sourceMappingURL=index.js.map\n","export * from './indexed-storage'\n","/**\n * Minimal Wrapper for indexedDB\n *\n * Based on this gist\n * https://gist.github.com/JamesMessinger/a0d6389a5d0e3a24814b\n */\n\nconst { indexedDB } = window\n\nexport class IndexedStorage {\n  static VERSION = 1\n\n  private request: any\n  private promiseFulfilled?: (db: any) => void\n  private dbPromise: Promise<any>\n\n  private success = () => {\n    this.promiseFulfilled!(this.request.result)\n  }\n\n  private update = () => {\n    const db = this.request.result\n    const store = db.createObjectStore('objects', { keyPath: 'id' })\n    // store.createIndex(\"NameIndex\", ['_created', '_modified'])\n  }\n\n  readonly name: string\n\n  constructor(name: string) {\n    this.name = name\n    const request = indexedDB.open(name, IndexedStorage.VERSION)\n    request.onsuccess = this.success\n    request.onupgradeneeded = this.update\n\n    this.dbPromise = new Promise((resolve) => {\n      this.promiseFulfilled = resolve\n    })\n\n    this.request = request\n  }\n\n  private async dispatch(\n    method: 'put' | 'get' | 'count' | 'getAllKeys' | 'clear' | 'delete',\n    value?: any\n  ): Promise<any> {\n    const db = await this.dbPromise\n    const tx = db.transaction(\n      'objects',\n      ['put', 'clear', 'delete'].includes(method) ? 'readwrite' : 'readonly'\n    )\n    const store = tx.objectStore('objects')\n    return new Promise((resolve, reject) => {\n      const req = store[method](value)\n      req.onsuccess = () =>\n        resolve(req.result?.value != null ? req.result.value : req.result)\n      req.onerror = () => reject(req.error)\n    })\n  }\n\n  async setItem(id: string, value: any): Promise<void> {\n    return this.dispatch('put', { id, value })\n  }\n\n  async getItem(id: string): Promise<any | undefined> {\n    return this.dispatch('get', id)\n  }\n\n  async count(): Promise<number> {\n    return this.dispatch('count')\n  }\n\n  async allKeys(): Promise<string[]> {\n    return this.dispatch('getAllKeys')\n  }\n\n  async delete(id: string): Promise<void> {\n    return this.dispatch('delete', id)\n  }\n\n  async clear(): Promise<void> {\n    return this.dispatch('clear')\n  }\n}\n\nexport const indexedStorage = new IndexedStorage('default-local-db')\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$f534e8972a5b1be2$exports","$f534e8972a5b1be2$export$41a78aa1acdd6131","$f534e8972a5b1be2$export$5281f72867bab9d2","indexedDB","$f534e8972a5b1be2$var$indexedDB","window","VERSION","request","promiseFulfilled","dbPromise","success","result","update","db","createObjectStore","keyPath","name","open","onsuccess","onupgradeneeded","Promise","resolve","dispatch","method","value","store","tx","transaction","includes","objectStore","reject","req","onerror","error","setItem","id","getItem","count","allKeys","delete","clear","IndexedStorage","indexedStorage"],"version":3,"file":"index.js.map"}