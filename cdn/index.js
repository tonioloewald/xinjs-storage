function e(e,t,s,r){Object.defineProperty(e,t,{get:s,set:r,enumerable:!0,configurable:!0})}var t={};e(t,"IndexedStorage",()=>r),e(t,"indexedStorage",()=>o);let{indexedDB:s}=window;class r{static VERSION=1;request;promiseFulfilled;dbPromise;success=()=>{this.promiseFulfilled(this.request.result)};update=()=>{let e=this.request.result;e.createObjectStore("objects",{keyPath:"id"})};_name;get name(){return this._name}constructor(e){this._name=e;let t=s.open(e,r.VERSION);t.onsuccess=this.success,t.onupgradeneeded=this.update,this.dbPromise=new Promise(e=>{this.promiseFulfilled=e}),this.request=t}async setItem(e,t){let s=await this.dbPromise,r=s.transaction("objects","readwrite"),o=r.objectStore("objects");return new Promise(s=>{let r=o.put({id:e,value:t});r.onsuccess=s})}async getItem(e){let t=await this.dbPromise,s=t.transaction("objects","readwrite"),r=s.objectStore("objects");return new Promise(t=>{let s=r.get(e);s.onsuccess=()=>{t(s.result?.value!=null?s.result.value:void 0)}})}async count(){let e=await this.dbPromise,t=e.transaction("objects","readwrite"),s=t.objectStore("objects");return new Promise(e=>{let t=s.count();t.onsuccess=()=>{e(t.result)}})}async allKeys(){let e=await this.dbPromise,t=e.transaction("objects","readwrite"),s=t.objectStore("objects");return new Promise(e=>{let t=s.getAllKeys();t.onsuccess=()=>{e(t.result)}})}async delete(e){let t=await this.dbPromise,s=t.transaction("objects","readwrite"),r=s.objectStore("objects");return new Promise(t=>{let s=r.delete(e);s.onsuccess=t})}async clear(){let e=await this.dbPromise,t=e.transaction("objects","readwrite"),s=t.objectStore("objects");return new Promise(e=>{let t=s.clear();t.onsuccess=e})}}let o=new r("default-local-db");export{r as IndexedStorage,o as indexedStorage};
//# sourceMappingURL=index.js.map
