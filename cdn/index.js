function e(e,t,s,r){Object.defineProperty(e,t,{get:s,set:r,enumerable:!0,configurable:!0})}var t={};e(t,"IndexedStorage",()=>r),e(t,"indexedStorage",()=>a);let{indexedDB:s}=window;class r{static VERSION=1;request;promiseFulfilled;dbPromise;success=()=>{this.promiseFulfilled(this.request.result)};update=()=>{this.request.result.createObjectStore("objects",{keyPath:"id"})};name;constructor(e){this.name=e;let t=s.open(e,r.VERSION);t.onsuccess=this.success,t.onupgradeneeded=this.update,this.dbPromise=new Promise(e=>{this.promiseFulfilled=e}),this.request=t}async dispatch(e,t){let s=(await this.dbPromise).transaction("objects",["put","clear","delete"].includes(e)?"readwrite":"readonly").objectStore("objects");return new Promise((r,a)=>{let i=s[e](t);i.onsuccess=()=>r(i.result?.value!=null?i.result.value:i.result),i.onerror=()=>a(i.error)})}async setItem(e,t){return this.dispatch("put",{id:e,value:t})}async getItem(e){return this.dispatch("get",e)}async count(){return this.dispatch("count")}async allKeys(){return this.dispatch("getAllKeys")}async delete(e){return this.dispatch("delete",e)}async clear(){return this.dispatch("clear")}}let a=new r("default-local-db");export{r as IndexedStorage,a as indexedStorage};
//# sourceMappingURL=index.js.map
