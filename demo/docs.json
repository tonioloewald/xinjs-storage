[
  {
    "text": "# xinjs-storage\n\n[xinjs](https://xinjs.net) [discord](https://discord.gg/ramJ9rgky5) [github](https://github.com/tonioloewald/xinjs-ui#readme) [npm](https://www.npmjs.com/package/xinjs-ui) <size-break min-width=\"500\"><img alt=\"bundlejs\" src=\"https://deno.bundlejs.com/?q=xinjs-storage&badge=\"></size-break>\n\nCopyright ©2023 Tonio Loewald\n\n## what is it?\n\n`xinjs-storage` is an ultra-lightweight wrapper for indexedDB that gives you\nbascially a _near_ drop-in replacement for `localStorage` that is built on `indexedDB`\nand therefore doesn't run into size limits.\n\nWhy not drop-in? `indexedDB` is asynchronous and has a _horrible_ API. `xinjs-storage`\nwraps everything in promises but it's still async.\n\n## why?\n\nThere are other wrappers for indexedDB but they aren't _teensy_. People get\nenticed by the robust looking database features and forget Javascript actually\ndoes all that _faster_, so why bother?\n\n## Installation\n\n> npm i -d xinjs-storage\n\n## Usage\n\n> import { indexedStorage } from 'xinjs-storage'\n>\n> await indexedStorage.setItem('foo', {bar: 'baz'})\n> const greatMovie = await indexedStorage.getItem('luhrmann')\n\n## Methods\n\nYou get the methods you expect and need, and nothing else.\n\n> async indexedStorage.setItem(id: string, value: any): Promise<void>\n> async indexedStorage.getItem(id: string): Promise<any | undefined>\n> async indexedStorage.count(): Promise<number>\n> async indexedStorage.allKeys(): Promise<string[]>\n> asnyc indexedStorage.delete(id: string): Promise<void>\n> async indexedStorage.clear(): Promise<void>\n\n## Class\n\nIf you want to create multiple stores for some reason (e.g. you might be merging\ntwo projects that each use their own), there's actually an `IndexedStorage` class.\n\n> import { IndexedStorage } from 'xinjs-storage'\n>\n> const myStorage = new IndexedStorage('my-unique-name')\n\n## VERSION\n\nThe `IndexedStorage` class has a single static property `VERSION` that versions\nthe store so if the schema ever needs to be updated…\n\n## A Useful Hint\n\nTo find out how much local storage you're wasting, you can use\n\n> await navigator.storage.estimate()\n\nin your browser's console.\n\n## The Future\n\nUltimately, the goal is simply to allow you to add your own **Firebase** app\nconfig and then transparently persist storage to the cloud with a sensible\nsecurity model. In this universe, `xinjs-storage` will also provide a transparent\nlocal cache for **synced** collections.\n",
    "filename": "README.md",
    "path": "README.md"
  }
]
